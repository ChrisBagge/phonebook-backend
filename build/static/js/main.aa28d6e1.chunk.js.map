{"version":3,"sources":["components/Note.tsx","services/notes.ts","components/Notification.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","id","baseUrl","newObject","a","request","axios","put","response","data","getAll","get","nonExisting","date","concat","create","post","update","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","then","initialNotes","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa28d6e1.chunk.js","sourcesContent":["import React from 'react'\nimport NoteType from '../types/NoteType'\n\nconst Note = ({ note, toggleImportance }: { note: NoteType, toggleImportance: (note:number) => void }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={() => toggleImportance(note.id!)}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from \"axios\";\nimport NoteType from \"../types/NoteType\";\n\nconst baseUrl = 'https://fathomless-woodland-92917.herokuapp.com/api/notes';\n\nconst getAll = async () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  const response = await request;\n  return response.data.concat(nonExisting);\n}\n\nconst create = async (newObject: NoteType) => {\n  const request = axios.post(baseUrl, newObject)\n  const response = await request;\n  return response.data;\n}\n\nasync function update(id: number, newObject: NoteType) {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  const response = await request;\n  return response.data;\n}\n\nexport default { getAll, create, update }\n\n","import React from \"react\";\n\nfunction Notification({ message }: { message: string}) {\n  if (message === '')\n    return <></>\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n\n\n}\n\nexport default Notification;","import React from \"react\";\n\nfunction Footer() {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nexport default Footer;","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport NoteType from './types/NoteType'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nfunction App() {\n  const [notes, setNotes] = useState<NoteType[]>([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n    noteService.getAll()\n      //axios\n      //      .get('http://localhost:3001/notes')\n      .then(initialNotes => {\n        console.log('promise fulfilled')\n        setNotes(initialNotes)\n      })\n  }, [])\n\n\n  const toggleImportanceOf = (id: number) => {\n    const url = `http://localhost:3005/api/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote: NoteType = { ...note!, important: !note!.important }\n\n    noteService.update(id, changedNote)\n      //axios.put(url, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note?.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage('')\n        }, 5000)\n      })\n    setNotes(notes.filter(n => n.id !== id))\n\n  }\n\n\n  const addNote = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n    noteService\n      .create(noteObject)\n      //axios\n      //      .post('http://localhost:3001/notes', noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n\n  }\n\n  const handleNoteChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={toggleImportanceOf} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}